
name: release multibuild

on:
  push:
    tags:
      - '*.*.*'

permissions:
  contents: write

env:
  REF: ${{ github.ref }}
  VERSION: ${{ github.ref_name }}
  DEPLOY_DIR: deploy
  BUILD_DIR: build
  EXE: crosshairpp
  EXE_DOS: crosshairpp.exe
  CONFIG: Release
  DESKTOP_FILE: resources/appimage/crosshairpp.desktop
  ICON_FILE: resources/appimage/icon.png

jobs:

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Qt6
        uses: jurplel/install-qt-action@v4
        with:
          version: 6.8.3
          host: linux
          arch: linux_gcc_64
          target: desktop
          cache: true

      - name: Install linuxdeploy
        run: |
          wget -c https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget -c https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          chmod +x linuxdeploy-plugin-qt-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage

      - name: CMake
        run: cmake -S . -B ${{ env.BUILD_DIR }}  -DTARGET="${{ env.EXE }}" -DVERSION="${{ env.VERSION }}" -DCMAKE_BUILD_TYPE="${{ env.CONFIG }}" -DCMAKE_PREFIX_PATH="${{ env.QT_ROOT_DIR }}"

      - name: Build
        run: cmake --build ${{ env.BUILD_DIR }}

      - name: Strip binaries
        run: strip ${{ env.BUILD_DIR }}/${{ env.EXE }}

      - name: Build AppImage
        run:  |
          VERSION="${{ env.VERSION }}" ./linuxdeploy-x86_64.AppImage --appdir Crosshairpp.AppDir --executable ${{ env.BUILD_DIR }}/${{ env.EXE }} --plugin qt --desktop-file ${{ env.DESKTOP_FILE }} --icon-file ${{ env.ICON_FILE }} --output appimage
          mv crosshairpp-${{ env.VERSION }}-x86_64.AppImage crosshairpp-linux-x86_64-portable.AppImage

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-appimage-release
          path: crosshairpp-linux-x86_64-portable.AppImage
          retention-days: 90

  build-windows:
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4

      - name: Install WiX
        run: choco install wixtoolset -y

      - name: Install Qt6
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.8.3'
          host: 'windows'
          arch: 'win64_msvc2022_64'
          target: 'desktop'
          cache: true

      - name: CMake
        run: cmake -S . -B ${{ env.BUILD_DIR }}  -DTARGET="${{ env.EXE }}" -DVERSION="${{ env.VERSION }}" -DCMAKE_PREFIX_PATH="${{ env.QT_ROOT_DIR }}"

      - name: Build
        run: cmake --build ${{ env.BUILD_DIR }} --config ${{ env.CONFIG }}

      - name: Windeploy
        run: |
          mkdir ${{ env.DEPLOY_DIR }}
          Copy-Item ${{ env.BUILD_DIR }}\${{ env.CONFIG }}\${{ env.EXE_DOS }} ${{ env.DEPLOY_DIR }}\
          & "${{ env.QT_ROOT_DIR }}\bin\windeployqt.exe" "${{ env.DEPLOY_DIR }}\${{ env.EXE_DOS }}"
        shell: pwsh

      - name: Build MSI
        run: |
          heat dir "${{ env.DEPLOY_DIR }}\" -cg CrosshairAll -dr INSTALLFOLDER -srd -gg -sreg -var var.SourceDir -template fragment -out resources\heat.wxs          
          candle.exe resources\msi\installer.wxs resources\heat.wxs -dVersion="${{ env.VERSION }}" -dSourceDir="${{ env.DEPLOY_DIR }}"
          light.exe installer.wixobj heat.wixobj -ext WixUIExtension -o "crosshairpp-windows-x86_64-installer.msi"
        shell: pwsh

      - name: Upload artifact (msi)
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer-release
          path: crosshairpp-windows-x86_64-installer.msi
          retention-days: 90

      - name: Upload artifact (portable)
        uses: actions/upload-artifact@v4
        with:
          name: windows-portable-release
          path: ${{ env.DEPLOY_DIR }}
          retention-days: 90

  release:
    name: Release
    runs-on: ubuntu-latest
    needs:
      - build-linux
      - build-windows
    if: github.ref_type == 'tag'
    steps:

      - uses: actions/download-artifact@v4
        with:
          name: linux-appimage-release
          path: artifacts/

      - uses: actions/download-artifact@v4
        with:
          name: windows-installer-release
          path: artifacts/

      - uses: actions/download-artifact@v4
        with:
          name: windows-portable-release
          path: crosshairpp/
  
      - name: Prepare release assets
        run: |
          find .
          zip -r crosshairpp-windows-x86_64-portable.zip crosshairpp
        shell: bash

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/crosshairpp-windows-x86_64-installer.msi
            crosshairpp-windows-x86_64-portable.zip
            artifacts/crosshairpp-linux-x86_64-portable.AppImage
          tag_name: ${{ env.VERSION }}
          name: "Release ${{ env.VERSION }}"
          body: "> [!NOTE]\n> The pre-built Crosshair++ binaries are **not signed**, which may cause security warnings on Windows. All release binaries were compiled in GitHub Actions run [#${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n#### Release Notes"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
